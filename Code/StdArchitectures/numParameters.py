import argparse
import torch
import torchvision.models as models

alexnet = models.alexnet(pretrained=False)
vgg11 = models.vgg11(pretrained=False)
vgg11_bn = models.vgg11_bn(pretrained=False)
vgg13 = models.vgg13(pretrained=False)
vgg13_bn = models.vgg13_bn(pretrained=False)
vgg16 = models.vgg16(pretrained=False)
vgg16_bn = models.vgg16_bn(pretrained=False)
vgg19 = models.vgg19(pretrained=False)
vgg19_bn = models.vgg19_bn(pretrained=False)
resnet18 = models.resnet18(pretrained=False)
resnet34 = models.resnet34(pretrained=False)
resnet50 = models.resnet50(pretrained=False)
resnet101 = models.resnet101(pretrained=False)
resnet152 = models.resnet152(pretrained=False)
squeezenet1_0 = models.squeezenet1_0(pretrained=False)
squeezenet1_1 = models.squeezenet1_1(pretrained=False)
densenet121 = models.densenet121(pretrained=False)
densenet161 = models.densenet161(pretrained=False)
densenet169 = models.densenet169(pretrained=False)
densenet201 = models.densenet201(pretrained=False)
inception = models.inception_v3(pretrained=False)

print("alexnet parameter num: {0}".format(count_parameters(alexnet)))
print("vgg11 parameter num: {0}".format(count_parameters(vgg11)))
print("vgg11_bn parameter num: {0}".format(count_parameters(vgg11_bn)))
print("vgg13 parameter num: {0}".format(count_parameters(vgg13)))
print("vgg13_bn parameter num: {0}".format(count_parameters(vgg13_bn)))
print("vgg16 parameter num: {0}".format(count_parameters(vgg16)))
print("vgg16_bn parameter num: {0}".format(count_parameters(vgg16_bn)))
print("vgg19 parameter num: {0}".format(count_parameters(vgg19_bn)))
print("vgg19_bn parameter num: {0}".format(count_parameters(vgg19)))
print("resnet18 parameter num: {0}".format(count_parameters(resnet18)))
print("resnet34 parameter num: {0}".format(count_parameters(resnet34)))
print("resnet50 parameter num: {0}".format(count_parameters(resnet50)))
print("resnet101 parameter num: {0}".format(count_parameters(resnet101)))
print("resnet152 parameter num: {0}".format(count_parameters(resnet152)))
print("squeezenet1_0 parameter num: {0}".format(count_parameters(squeezenet1_0)))
print("squeezenet1_1 parameter num: {0}".format(count_parameters(squeezenet1_1)))
print("densenet121 parameter num: {0}".format(count_parameters(densenet121)))
print("densenet161 parameter num: {0}".format(count_parameters(densenet161)))
print("densenet169 parameter num: {0}".format(count_parameters(densenet169)))
print("densenet201 parameter num: {0}".format(count_parameters(densenet201)))
print("inceptionv3 parameter num: {0}".format(count_parameters(inception)))

def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)
